"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Unleash = exports.Strategy = void 0;
var os_1 = require("os");
var events_1 = require("events");
var client_1 = require("./client");
var repository_1 = require("./repository");
var metrics_1 = require("./metrics");
var strategy_1 = require("./strategy");
Object.defineProperty(exports, "Strategy", { enumerable: true, get: function () { return strategy_1.Strategy; } });
var variant_1 = require("./variant");
var helpers_1 = require("./helpers");
var BACKUP_PATH = os_1.tmpdir();
var Unleash = /** @class */ (function (_super) {
    __extends(Unleash, _super);
    function Unleash(_a) {
        var appName = _a.appName, _b = _a.environment, environment = _b === void 0 ? 'default' : _b, projectName = _a.projectName, instanceId = _a.instanceId, url = _a.url, _c = _a.refreshInterval, refreshInterval = _c === void 0 ? 15 * 1000 : _c, _d = _a.metricsInterval, metricsInterval = _d === void 0 ? 60 * 1000 : _d, _e = _a.disableMetrics, disableMetrics = _e === void 0 ? false : _e, _f = _a.backupPath, backupPath = _f === void 0 ? BACKUP_PATH : _f, _g = _a.strategies, strategies = _g === void 0 ? [] : _g, repository = _a.repository, customHeaders = _a.customHeaders, customHeadersFunction = _a.customHeadersFunction, timeout = _a.timeout;
        var _this = _super.call(this) || this;
        _this.synchronized = false;
        if (!url) {
            throw new Error('Unleash server URL missing');
        }
        var unleashUrl = url;
        if (unleashUrl.endsWith('/features')) {
            var oldUrl_1 = unleashUrl;
            process.nextTick(function () {
                return _this.emit('warn', "Unleash server URL \"" + oldUrl_1 + "\" should no longer link directly to /features");
            });
            unleashUrl = unleashUrl.replace(/\/features$/, '');
        }
        if (!unleashUrl.endsWith('/')) {
            unleashUrl += '/';
        }
        if (!appName) {
            throw new Error('Unleash client appName missing');
        }
        var unleashInstanceId = instanceId;
        if (!unleashInstanceId) {
            var info = void 0;
            try {
                info = os_1.userInfo();
            }
            catch (e) {
                // unable to read info;
            }
            var prefix = info
                ? info.username
                : "generated-" + Math.round(Math.random() * 1000000) + "-" + process.pid;
            unleashInstanceId = prefix + "-" + os_1.hostname();
        }
        _this.staticContext = { appName: appName, environment: environment };
        _this.repository =
            repository ||
                new repository_1.default({
                    backupPath: backupPath,
                    projectName: projectName,
                    url: unleashUrl,
                    appName: appName,
                    instanceId: unleashInstanceId,
                    refreshInterval: refreshInterval,
                    headers: customHeaders,
                    customHeadersFunction: customHeadersFunction,
                    timeout: timeout,
                });
        var strats = strategy_1.defaultStrategies.concat(strategies);
        _this.repository.on('ready', function () {
            _this.client = new client_1.default(_this.repository, strats);
            _this.client.on('error', function (err) { return _this.emit('error', err); });
            _this.client.on('warn', function (msg) { return _this.emit('warn', msg); });
            process.nextTick(function () {
                _this.emit('ready');
            });
        });
        _this.repository.on('error', function (err) {
            // eslint-disable-next-line no-param-reassign
            err.message = "Unleash Repository error: " + err.message;
            _this.emit('error', err);
        });
        _this.repository.on('warn', function (msg) {
            _this.emit('warn', msg);
        });
        _this.repository.on('unchanged', function () {
            _this.emit('unchanged');
        });
        _this.repository.on('changed', function (data) {
            _this.emit('changed', data);
            // Only emit the fully synchronized event the first time.
            if (!_this.synchronized) {
                _this.synchronized = true;
                process.nextTick(function () { return _this.emit('synchronized'); });
            }
        });
        _this.metrics = new metrics_1.default({
            disableMetrics: disableMetrics,
            appName: appName,
            instanceId: unleashInstanceId,
            strategies: strats.map(function (strategy) { return strategy.name; }),
            metricsInterval: metricsInterval,
            url: unleashUrl,
            headers: customHeaders,
            customHeadersFunction: customHeadersFunction,
            timeout: timeout,
        });
        _this.metrics.on('error', function (err) {
            // eslint-disable-next-line no-param-reassign
            err.message = "Unleash Metrics error: " + err.message;
            _this.emit('error', err);
        });
        _this.metrics.on('warn', function (msg) {
            _this.emit('warn', msg);
        });
        _this.metrics.on('count', function (name, enabled) {
            _this.emit('count', name, enabled);
        });
        _this.metrics.on('sent', function (payload) {
            _this.emit('sent', payload);
        });
        _this.metrics.on('registered', function (payload) {
            _this.emit('registered', payload);
        });
        return _this;
    }
    Unleash.prototype.destroy = function () {
        this.repository.stop();
        this.metrics.stop();
        this.client = undefined;
    };
    Unleash.prototype.isEnabled = function (name, context, fallback) {
        if (context === void 0) { context = {}; }
        var enhancedContext = __assign(__assign({}, this.staticContext), context);
        var fallbackFunc = helpers_1.createFallbackFunction(name, enhancedContext, fallback);
        var result;
        if (this.client !== undefined) {
            result = this.client.isEnabled(name, enhancedContext, fallbackFunc);
        }
        else {
            result = fallbackFunc();
            this.emit('warn', "Unleash has not been initialized yet. isEnabled(" + name + ") defaulted to " + result);
        }
        this.count(name, result);
        return result;
    };
    Unleash.prototype.getVariant = function (name, context, fallbackVariant) {
        if (context === void 0) { context = {}; }
        var enhancedContext = __assign(__assign({}, this.staticContext), context);
        var result;
        if (this.client !== undefined) {
            result = this.client.getVariant(name, enhancedContext, fallbackVariant);
        }
        else {
            result = typeof fallbackVariant !== 'undefined' ? fallbackVariant : variant_1.getDefaultVariant();
            this.emit('warn', "Unleash has not been initialized yet. isEnabled(" + name + ") defaulted to " + result);
        }
        if (result.name) {
            this.countVariant(name, result.name);
        }
        else {
            this.count(name, result.enabled);
        }
        return result;
    };
    Unleash.prototype.getFeatureToggleDefinition = function (toggleName) {
        return this.repository.getToggle(toggleName);
    };
    Unleash.prototype.getFeatureToggleDefinitions = function () {
        return this.repository.getToggles();
    };
    Unleash.prototype.count = function (toggleName, enabled) {
        this.metrics.count(toggleName, enabled);
    };
    Unleash.prototype.countVariant = function (toggleName, variantName) {
        this.metrics.countVariant(toggleName, variantName);
    };
    return Unleash;
}(events_1.EventEmitter));
exports.Unleash = Unleash;
//# sourceMappingURL=unleash.js.map