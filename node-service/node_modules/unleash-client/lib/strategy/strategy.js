"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Strategy = exports.Operator = void 0;
var helpers_1 = require("../helpers");
var Operator;
(function (Operator) {
    Operator[Operator["IN"] = 'IN'] = "IN";
    Operator[Operator["NOT_IN"] = 'NOT_IN'] = "NOT_IN";
})(Operator = exports.Operator || (exports.Operator = {}));
var Strategy = /** @class */ (function () {
    function Strategy(name, returnValue) {
        if (returnValue === void 0) { returnValue = false; }
        this.name = name || 'unknown';
        this.returnValue = returnValue;
    }
    Strategy.prototype.checkConstraint = function (constraint, context) {
        var field = constraint.contextName;
        var contextValue = helpers_1.resolveContextValue(context, field);
        var isIn = constraint.values.some(function (val) { return val.trim() === contextValue; });
        return constraint.operator === Operator.IN ? isIn : !isIn;
    };
    Strategy.prototype.checkConstraints = function (context, constraints) {
        var _this = this;
        if (!constraints || constraints.length === 0) {
            return true;
        }
        return constraints.every(function (constraint) { return _this.checkConstraint(constraint, context); });
    };
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Strategy.prototype.isEnabled = function (parameters, context) {
        return this.returnValue;
    };
    Strategy.prototype.isEnabledWithConstraints = function (parameters, context, constraints) {
        if (constraints === void 0) { constraints = []; }
        return this.checkConstraints(context, constraints) && this.isEnabled(parameters, context);
    };
    return Strategy;
}());
exports.Strategy = Strategy;
//# sourceMappingURL=strategy.js.map