"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var variant_1 = require("./variant");
var UnleashClient = /** @class */ (function (_super) {
    __extends(UnleashClient, _super);
    function UnleashClient(repository, strategies) {
        var _this = _super.call(this) || this;
        _this.repository = repository;
        _this.strategies = strategies || [];
        _this.warned = {};
        _this.strategies.forEach(function (strategy) {
            if (!strategy ||
                !strategy.name ||
                typeof strategy.name !== 'string' ||
                !strategy.isEnabled ||
                typeof strategy.isEnabled !== 'function') {
                throw new Error('Invalid strategy data / interface');
            }
        });
        return _this;
    }
    UnleashClient.prototype.getStrategy = function (name) {
        return this.strategies.find(function (strategy) { return strategy.name === name; });
    };
    UnleashClient.prototype.warnOnce = function (missingStrategy, name, strategies) {
        if (!this.warned[missingStrategy + name]) {
            this.warned[missingStrategy + name] = true;
            this.emit('warn', "Missing strategy \"" + missingStrategy + "\" for toggle \"" + name + "\". Ensure that \"" + strategies
                .map(function (_a) {
                var n = _a.name;
                return n;
            })
                .join(', ') + "\" are supported before using this toggle");
        }
    };
    UnleashClient.prototype.isEnabled = function (name, context, fallback) {
        var feature = this.repository.getToggle(name);
        return this.isFeatureEnabled(feature, context, fallback);
    };
    UnleashClient.prototype.isFeatureEnabled = function (feature, context, fallback) {
        var _this = this;
        if (!feature) {
            return fallback();
        }
        if (!feature || !feature.enabled) {
            return false;
        }
        if (!Array.isArray(feature.strategies)) {
            this.emit('error', new Error("Malformed feature, strategies not an array, is a " + typeof feature.strategies));
            return false;
        }
        if (feature.strategies.length === 0) {
            return feature.enabled;
        }
        return (feature.strategies.length > 0 &&
            feature.strategies.some(function (strategySelector) {
                var strategy = _this.getStrategy(strategySelector.name);
                if (!strategy) {
                    _this.warnOnce(strategySelector.name, feature.name, feature.strategies);
                    return false;
                }
                return strategy.isEnabledWithConstraints(strategySelector.parameters, context, strategySelector.constraints);
            }));
    };
    UnleashClient.prototype.getVariant = function (name, context, fallbackVariant) {
        var fallback = fallbackVariant || variant_1.getDefaultVariant();
        var feature = this.repository.getToggle(name);
        if (typeof feature === 'undefined' ||
            !feature.variants ||
            !Array.isArray(feature.variants) ||
            feature.variants.length === 0) {
            return fallback;
        }
        var enabled = this.isFeatureEnabled(feature, context, function () {
            return fallbackVariant ? fallbackVariant.enabled : false;
        });
        if (!enabled) {
            return fallback;
        }
        var variant = variant_1.selectVariant(feature, context);
        if (variant === null) {
            return fallback;
        }
        return {
            name: variant.name,
            payload: variant.payload,
            enabled: enabled,
        };
    };
    return UnleashClient;
}(events_1.EventEmitter));
exports.default = UnleashClient;
//# sourceMappingURL=client.js.map